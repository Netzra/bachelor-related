#-----------------------------------------------------------------------------------------
#this code was run via console
#it safes participants data (Linear Regression values + Meaned values for every condition and type)
# and enables plotting or pearson correlation calculation
# 
#-----------------------------------------------------------------------------------------
from scipy import stats
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dfvNum = pd.read_pickle("filepath to pickle files")

dataNum = {}
dataNum["order"] = [["reversed 1-6", "unreversed 1-6", "reversed+unreversed 1-6"]]

for participant in dfvNum.index.get_level_values(0).dropna().drop_duplicates("first"):
    dataNum[participant] = [[[] for x in range(6)] for i in range(3)]

    for value in range(1, dfvNum.index.get_level_values(1).drop_duplicates("first").__len__()):
        for reversed_speech in range(dfvNum.loc[participant]["reversed_speech"].dropna().__len__()):
            if dfvNum.loc[participant]["reversed_speech"].dropna().to_list()[reversed_speech]:
                dataNum[participant][0][
                    dfvNum.loc[participant]["solution"][value].to_list()[reversed_speech] - 1].append(
                    dfvNum.loc[participant]["response"][value].to_list()[reversed_speech]
                )
                dataNum[participant][2][
                    dfvNum.loc[participant]["solution"][value].to_list()[reversed_speech] - 1].append(
                    dfvNum.loc[participant]["response"][value].to_list()[reversed_speech]
                )
            else:
                dataNum[participant][1][
                    dfvNum.loc[participant]["solution"][value].to_list()[reversed_speech] - 1].append(
                    dfvNum.loc[participant]["response"][value].to_list()[reversed_speech]
                )
                dataNum[participant][2][
                    dfvNum.loc[participant]["solution"][value].to_list()[reversed_speech] - 1].append(
                    dfvNum.loc[participant]["response"][value].to_list()[reversed_speech]
                )
    for type in range(len(dataNum[participant])):
        for solution in range(1, len(dataNum[participant][type])):
            dataNum[participant][type][solution]= np.mean(dataNum[participant][type][solution])

# die subject ordnung sollte beibehalten werden
# y sind jeweils die slope werte in reversed unreversed oder undifferenziert
# x sind die richtigen LÃ¶sungswerte
# scipy.stats.linregress - nimmt ein array x ein array y

# localisation per participant

dfvloc = pd.read_pickle("filepath to picklefiles")
order = [37.5, 25.0, 12.5, 0.0, -12.5, -25.0, -37.5]
dataloc = {}
dataloc["order"] = ["Babble 1-7", "Noise 1-7", "Babble+noise1-7"]

for participant in dfvloc.index.get_level_values(0).drop_duplicates():

    dataloc[participant] = [[[] for x in range(order.__len__())] for i in range(3)]

    for value in range(1, dfvloc.index.get_level_values(1).drop_duplicates().__len__()):
        for mode in range(dfvloc.loc[participant]["mode"].dropna().drop_duplicates().__len__()):
            if dfvloc.loc[participant]["mode"].dropna().to_list()[mode] == "babble":
                dataloc[participant][0][
                    order.index(dfvloc.loc[participant]["actual"][value].to_list()[mode][1])].append(
                    dfvloc.loc[participant]["perceived"][value].to_list()[mode][1]
                )
                dataloc[participant][2][
                    order.index(dfvloc.loc[participant]["actual"][value].to_list()[mode][1])].append(
                    dfvloc.loc[participant]["perceived"][value].to_list()[mode][1]
                )

            else:
                dataloc[participant][1][
                    order.index(dfvloc.loc[participant]["actual"][value].to_list()[mode][1])].append(
                    dfvloc.loc[participant]["perceived"][value].to_list()[mode][1]
                )
                dataloc[participant][2][
                    order.index(dfvloc.loc[participant]["actual"][value].to_list()[mode][1])].append(
                    dfvloc.loc[participant]["perceived"][value].to_list()[mode][1]
                )

    for type in range(len(dataloc[participant])):
        for position in range(len(dataloc[participant][type])):
            dataloc[participant][type][position] = np.mean(dataloc[participant][type][position])
# spatMask

dfvspatMaskabs = pd.read_pickle("filepath to picklefiles")
dataSpat = {}
dataSpat ["order"]=[12.5,25.0,37.5]
sublist = ('sub_06','sub_07','sub_08','sub_10','sub_11', 'sub_12','sub_13','sub_14','sub_18','sub_20','sub_21','sub_22',
    'sub_23', 'sub_24')

for participant in range(len(sublist)):
    dataSpat [sublist[participant]] = []
    for colum in dfvspatMaskabs.columns.to_list():
        dataSpat[sublist[participant]].append(np.mean([dfvspatMaskabs.iloc[participant][colum],dfvspatMaskabs.iloc[participant+14][colum]]))

#Calculation der Linearen Regressionen

LinRegressNum = {}
LinRegressLoc = {}
LinRegressSpat = {}

LinRegressNum["order"]=["regression values order: slope, intercept, rvalue, pvalue, stderr split into: reversed,clear,both"]
LinRegressLoc["order"]=["regression values order:slope, intercept, rvalue, pvalue, stderr split into: babble, noise, both"]
LinRegressSpat["order"]=["regression values order:slope, intercept, rvalue, pvalue, stderr without split"]

dataNum.pop("order")
dataloc.pop("order")
dataSpat.pop("order")

for participant in dataNum:
    for type in range(len(dataNum[participant])):
        dataNum[participant][type].pop(0)

for participant in dataloc.keys():
    LinRegressNum [participant] = [[]for type in range(3)]
    LinRegressLoc[participant] = [[]for type in range(3)]
    LinRegressSpat [participant]= []

    for type in range(dataNum[participant].__len__()):
        slope, intercept, rvalue, pvalue, stderr = stats.linregress([2, 3, 4, 5, 6],dataNum[participant][type])
        LinRegressNum[participant][type].append(slope)
        LinRegressNum[participant][type].append(intercept)
        LinRegressNum[participant][type].append(rvalue)
        LinRegressNum[participant][type].append(pvalue)
        LinRegressNum[participant][type].append(stderr)

    for type in range(dataloc[participant].__len__()):
        slope,intercept,rvalue,pvalue,stderr=stats.linregress(order, dataloc[participant][type])
        LinRegressLoc[participant][type].append(slope)
        LinRegressLoc[participant][type].append(intercept)
        LinRegressLoc[participant][type].append(rvalue)
        LinRegressLoc[participant][type].append(pvalue)
        LinRegressLoc[participant][type].append(stderr)

    slope, intercept,rvalue,pvalue,stderr = stats.linregress([12.5,25.0,37.5], dataSpat[participant])
    LinRegressSpat[participant].append(slope)
    LinRegressSpat[participant].append(intercept)
    LinRegressSpat[participant].append(rvalue)
    LinRegressSpat[participant].append(pvalue)
    LinRegressSpat[participant].append(stderr)

LinRegressSpat.pop("order")
LinRegressNum.pop("order")
LinRegressLoc.pop("order")

#general plotting schematics

x = []
y = []

for participant in LinRegressSpat:
    x.append(LinRegressSpat[participant][0])
    y.append(LinRegressNum[participant][2][0])

slope, intercept,rvalue,pvalue,stderr = stats.linregress(x, y)

y2 = []

for value in x:
    y2.append(slope*value+intercept)

plt.scatter(x,y, color= 'gray', alpha=.5)
plt.plot(x,y2)
plt.grid(alpha=0.2)
plt.xlabel("Spat slope per participant")
plt.ylabel("NumJudge slope per participant (R+C)")
plt.show()

#general pearson correlation

stats.pearsonr(x,y)

